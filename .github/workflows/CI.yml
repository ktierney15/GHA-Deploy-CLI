name: CI
on:
  # push: 
  #   branches: ["main"]
  # pull_request:
  #   branches: [ "main", "develop" ]
  workflow_dispatch:

jobs:
  Py-CI:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo 'export PATH="$HOME/.local/bin:$PATH"' >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Setup virtual environment
        run: |
          python -m venv .venv
          source .venv/bin/activate
          uv pip install -e .

      - name: Linting
        run: .venv/bin/pylint $(git ls-files '*.py') --fail-under=6

      - name: Unit testing
        env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
        run: |
          source .venv/bin/activate
          pytest tests/

  Version-and-Publish:
    needs: Py-CI
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.sha }}

      # - name: Sign in to Git
      #   run: |
      #     echo -n "machine github.com login ktierney15 password ${{ secrets.CI_TOKEN }}" > ~/.netrc
      #     git config --global user.name "${{ github.actor }}"
      #     git config --global user.email "${{ github.actor }}@users.noreply.github.com"
      #     git config --global credential.helper 'store --file ~/.git-credentials'
      - name: Sign in to Git
        run: |
          echo "https://ktierney15:${{ secrets.CI_TOKEN }}@github.com" > ~/.git-credentials
          git config --global credential.helper 'store --file ~/.git-credentials'
          git config --global user.name "ktierney15"
          git config --global user.email "ktierney15@users.noreply.github.com"


      - name: Get Latest Tag
        id: get-latest-tag
        run: echo "::set-output name=TAG::$(git describe --tags --abbrev=0)"

      - name: Read version from __init__.py
        id: read-version
        run: |
          VERSION=$(python -c "with open('gha_deploy/__init__.py') as f: exec(f.read()) ; print(__version__)")
          echo "Current version from __init__.py: $VERSION"
          echo "::set-output name=VERSION::$VERSION"

      - name: Compare versions and fail if not updated
        run: |
          if [[ "${{ steps.read-version.outputs.VERSION }}" == "${{ steps.get-latest-tag.outputs.TAG }}" ]]; then
            echo "Version has not been incremented. Failing the pipeline."
            exit 1
          fi

      - name: Update Git Tag
        run: |
          VERSION="${{ steps.read-version.outputs.VERSION }}"
          git tag $VERSION
          git push origin $VERSION

          